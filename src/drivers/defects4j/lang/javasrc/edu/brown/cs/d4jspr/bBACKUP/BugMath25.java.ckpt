/********************************************************************************/
/*                                                                              */
/*              BugMath25.java                                                  */
/*                                                                              */
/*      description of class                                                    */
/*                                                                              */
/********************************************************************************/
/*      Copyright 2011 Brown University -- Steven P. Reiss                    */
package edu.brown.cs.d4jspr;

import org.apache.commons.math3.optimization.fitting.HarmonicFitter;
import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;

public class BugMath25 implements BugConstants
{

public static void main(String [] args)
{
   testMath25();
}


public static void testMath25()
{
   final double[] y = { 0, 1, 2, 3, 2, 1,
         0, -1, -2, -3, -2, -1,
         0, 1, 2, 3, 2, 1,
         0, -1, -2, -3, -2, -1,
         0, 1, 2, 3, 2, 1, 0 };
   final int len = y.length;
   final WeightedObservedPoint[] points = new WeightedObservedPoint[len];
   for (int i = 0; i < len; i++) {
      points[i] = new WeightedObservedPoint(1, i, y[i]);
    }
   
   // The guesser fails because the function is far from an harmonic
   // function: It is a triangular periodic function with amplitude 3
   // and period 12, and all sample points are taken at integer abscissae
   // so function values all belong to the integer subset {-3, -2, -1, 0,
   // 1, 2, 3}.
   try {
      HarmonicFitter.ParameterGuesser hg = new HarmonicFitter.ParameterGuesser(points);
      double [] rslt = hg.guess();
    }
   catch (IllegalStateException ex) {
      System.err.println("This is what should happen");
    }
}

}       // end of class BugMath25




/* end of BugMath25.java */

